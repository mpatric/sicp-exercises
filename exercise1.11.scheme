; recursive

(define (f n)
  (cond
    ((< n 3) n)
    (else
      (+
        (f (- n 1))
        (* 2 (f (- n 2)))
        (* 3 (f (- n 3)))
      )
    )
  )
)

(f 0) -> 0
(f 1) -> 1
(f 2) -> 2
(f 3) -> (f 2) + (* 2 (f 1)) + (* 3 (f 0))
  = 2 + 2 + 0
(f 4) -> (f 3) + (* 2 (f 2)) + (* 3 (f 1))
  = (f 2) + (* 2 (f 1)) + (* 3 (f 0)) + (* 2 (f 2)) + (* 3 (f 1))
  = (* 3 (f 2)) + (* 5 (f 1)) + (* 3 (f 0))
  = (* 3 2) + (* 5 1) + (* 3 0)
  = 6 + 5
  = 11

; iterative
; we need 4 state variables

(define (f2 n)
  (define (iter a b c count)
    (cond
      ((= 0 count) a)
      (else (iter b c (+ c (* 2 b) (* 3 a)) (- count 1)))
    )
  )
  (iter 0 1 2 n)
)
