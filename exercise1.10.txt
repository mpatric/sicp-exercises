Exercise 1.10

(define (A x y)
  (cond
    ((= y 0) 0)
    ((= x 0) (* 2 y))
    ((= y 1) 2)
    (else
      (A
        (- x 1)
        (A x (- y 1))
      )
    )
  )
)

(A 1 10)
(A 0 (A 1 9))
(A 0 (A 0 (A 1 8)))
(A 0 (A 0 (A 0 (A 1 7))))
(A 0 (A 0 (A 0 (A 0 (A 1 6)))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
(A 0 (A 0 (A 0 (A 0 (A 0 32)))))
(A 0 (A 0 (A 0 (A 0 64))))
(A 0 (A 0 (A 0 128)))
(A 0 (A 0 256))
(A 0 512)
1024


(define (f n) (A 0 n))
  => 2 * n

(define (g n) (A 1 n))
  (A 0 (A 1 (- n 1)))
  = (f (A 1 (- n 1))) = (* 2 (A 1 (- n 1)))
  = (f (f (A 1 (- n 2)))) = (* 2 (* 2 (A 1 (- n 2))))
  .. until y is 1, when it will be (* 2 (* 2 (* 2 ... n times )))
  => 2 ^ n

(define (h n) (A 2 n))
  (A 1 (A 2 (- n 1)))
  = (g (A 2 (- n 1))) = (expt 2 (A 2 (- n 1)))
  = (g (g (A 2 (- n 2)))) = (expt 2 (expt 2 (A 2 (- n 2))))
  .. until y is 1, when it will be (expt 2 (expt 2 (expt 2 ... (expt 2 2))))
  => 2 ^ 2 ^ .. (n times)


Clojure:

(defn A [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        true
          (A
            (- x 1)
            (A x (- y 1)))))

With some tail-call optimisation:

(defn A [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        true
          (recur
            (dec x)
            (A x (dec y)))))


(A 1 10) = 1024
(A 2 4) = 65536
(A 3 3) = 65536

(defn f [n] (A 0 n))
= 2*n

(defn g [n] (A 1 n)) -> (A 1 n) -> (A 0 (A 1 (- n 1))) -> 2 * (A 1 (- n 1))
= 2^n

(defn h [n] (A 2 n)) -> (A (1 (A 2 (- n 1)))) -> 2^(A 2 (- n 1)) -> 2 ^ (2 ^ (A 2 (- n 2)))
= 2^(2^(2..)) (n times)

(defn k [n] (* 5 n n))
= 5*n^2
