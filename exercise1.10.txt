Exercise 1.10

(defn A [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        true
          (A
            (- x 1)
            (A x (- y 1)))))

With some tail-call optimisation:
            
(defn A [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        true
          (recur
            (dec x)
            (A x (dec y)))))


(A 1 10) = 1024
(A 2 4) = 65536
(A 3 3) = 65536

(defn f [n] (A 0 n))
= 2*n

(defn g [n] (A 1 n)) -> (A 1 n) -> (A 0 (A 1 (- n 1))) -> 2 * (A 1 (- n 1))
= 2^n

(defn h [n] (A 2 n)) -> (A (1 (A 2 (- n 1)))) -> 2^(A 2 (- n 1)) -> 2 ^ (2 ^ (A 2 (- n 2)))
= 2^(2^(2..)) (n times)

(defn k [n] (* 5 n n))
= 5*n^2
